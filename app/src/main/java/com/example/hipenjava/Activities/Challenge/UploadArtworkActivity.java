package com.example.hipenjava.Activities.Challenge;

import android.os.Bundle;
import android.util.Log;
import android.widget.Button;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.hipenjava.Activities.Image.ImageModel;
import com.example.hipenjava.R;
import com.google.firebase.Timestamp;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UploadArtworkActivity extends AppCompatActivity {
    RecyclerView recyclerView;
    Button uploadButton;
    List<ImageModel> artworkList = new ArrayList<>();
    ArtworkAdapter adapter;
    ImageModel selectedArtwork = null;

    String challengeId;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_upload_artwork);

        challengeId = getIntent().getStringExtra("challengeId");

        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        getSupportActionBar().setTitle("Tải lên tác phẩm");
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        toolbar.setNavigationOnClickListener(v -> finish());

        recyclerView = findViewById(R.id.recyclerView);
        uploadButton = findViewById(R.id.uploadButton);
        uploadButton.setEnabled(false);

        adapter = new ArtworkAdapter(artworkList, this, selected -> {
            selectedArtwork = selected;
            uploadButton.setEnabled(true);
        });

        recyclerView.setLayoutManager(new GridLayoutManager(this, 2));
        recyclerView.setAdapter(adapter);

        loadImagesFromFirebase();

        uploadButton.setOnClickListener(v -> {
            onUploadButton();
        });
    }

    private void loadImagesFromFirebase() {
        FirebaseFirestore db = FirebaseFirestore.getInstance();
        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
        String userId = user != null ? user.getUid() : null;

        db.collection("images")
                .whereEqualTo("userId", userId)
                .get()
                .addOnSuccessListener(queryDocumentSnapshots -> {
                    for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {
                        String id = doc.getString("id");
                        String imageUrl = doc.getString("imageUrl");
                        String name = doc.getString("name");
                        Timestamp timestamp= doc.getTimestamp("date");
                        String userid = doc.getString("userId");

                        if (imageUrl != null && name != null) {
                            artworkList.add(new ImageModel(id, name, imageUrl, timestamp, userid));
                        }
                    }
                    adapter.notifyDataSetChanged();
                })
                .addOnFailureListener(e -> {
                    Toast.makeText(this, "Failed to load images", Toast.LENGTH_SHORT).show();
                });
    }

    private void onUploadButton(){
        if (selectedArtwork == null){
            Toast.makeText(this, "Hãy chọn 1 tác phẩm", Toast.LENGTH_SHORT).show();
            return;
        }
        Toast.makeText(this, "Đang tải lên: " + selectedArtwork.getName(), Toast.LENGTH_SHORT).show();
        FirebaseFirestore db = FirebaseFirestore.getInstance();

        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
        String userId = user != null ? user.getUid() : null;

        // Create a map with the data to store
        Map<String, Object> data = new HashMap<>();
        data.put("id", null); // Auto-generated field will be added by Firestore
        data.put("imageID", selectedArtwork.getId());
        data.put("challengeID", challengeId);
        data.put("userID", userId);
        data.put("votecount", 0); // Set default votecount to 0

        // Add data to Firestore (creates collection and document with auto-generated ID)
        db.collection("submitted_artwork")  // Set the collection name
                .add(data)
                .addOnSuccessListener(documentReference -> {

                    String autoGeneratedId = documentReference.getId();

                    // Now update the document with the auto-generated ID as the value of 'id'
                    Map<String, Object> updateData = new HashMap<>();
                    updateData.put("id", autoGeneratedId);

                    // Update the document with the auto-generated ID
                    documentReference.update(updateData)
                            .addOnSuccessListener(aVoid -> {
                                Log.d("Firestore", "Document updated with ID: " + autoGeneratedId);
                            })
                            .addOnFailureListener(e -> {
                                Log.w("Firestore", "Error updating document", e);
                            });
                })
                .addOnFailureListener(e -> {
                    // Handle error
                    Log.w("Firestore", "Error adding document", e);
                });
    }
}
